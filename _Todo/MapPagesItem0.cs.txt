using Ans.Net8.Common;

namespace Ans.Net8.Web
{

	public enum MapPagesItemType
	{
		Catalog,
		Page,
		InternalPath,
		ExternalLink
	}



	public class MapPagesItem0
		: _MapItem_Base0<MapPagesItem0>
	{

		/* ctor */


		public MapPagesItem0(
			string target,
			string face,
			bool isHidden,
			string tags)
		{
			_parseFace(face);
			_parseTarget(target);
			IsHidden = isHidden;
			Tags = tags?.Split(',', ';');
			if (string.IsNullOrEmpty(target) && string.IsNullOrEmpty(face))
				IsHidden = true;
		}


		/* readonly properties */


		public MapPagesItemType Type { get; private set; }
		public LinkBuilder Link { get; private set; }
		public string Name { get; private set; }
		public string Target { get; private set; }
		public bool UseCatalogStartPage { get; private set; }
		public string Title { get; private set; }


		private string _shortTitle;
		public string ShortTitle
			=> _shortTitle ?? Title;


		public bool HasShortTitle
			=> _shortTitle != null;

		public bool IsHidden { get; }
		public string[] Tags { get; }


		/* properties */


		public string Path { get; set; }
		public bool IsSubActive { get; set; }


		/* methods */


		public void InitLink(
			string hostNodePath,
			string hostVirtualPath)
		{
			Link = new LinkBuilder { InnerHtml = ShortTitle };
			if (HasChilds)
				Type = MapPagesItemType.Catalog;
			switch (Type)
			{
				case MapPagesItemType.Catalog:
					UseCatalogStartPage = Childs?.Any(x => string.IsNullOrEmpty(x.Name)) ?? false;
					if (UseCatalogStartPage)
						Link.Href = $"{hostNodePath}{Path}";
					else
						Link.IsDisabled = true;
					break;
				case MapPagesItemType.Page:
					Link.Href = string.IsNullOrEmpty(Path) && hostNodePath != hostVirtualPath
						? hostNodePath[..^1]
						: $"{hostNodePath}{Path}";
					break;
				case MapPagesItemType.InternalPath:
					Link.Href = $"{hostVirtualPath}{Target}";
					break;
				default:
					Link.Href = Target;
					Link.IsExternal = true;
					break;
			}
		}


		public void MakeSupActive()
		{
			if (HasParent)
				foreach (var item1 in Parents)
					item1.IsSubActive = true;
		}


		/* functions */


		public LinkBuilder GetNavLink()
		{
			return (HasChilds)
				? new LinkBuilder
				{
					CssClass = Link.CssClass,
					Href = Link.Href,
					Id = Link.Id,
					InnerHtml = Link.InnerHtml,
					IsActive = Link.IsActive,
					IsExternal = Link.IsExternal,
					IsDisabled = false
				}
				: Link;
		}


		/* privates */


		private void _parseFace(
			string face)
		{
			if (!string.IsNullOrEmpty(face))
			{
				int i1 = face.IndexOf('|');
				if (i1 == -1)
					Title = face;
				else
				{
					_shortTitle = face[..i1];
					Title = string.Format(face[(i1 + 1)..], _shortTitle);
				}
			}
		}


		private void _parseTarget(
			string target)
		{
			if (string.IsNullOrEmpty(target))
				Type = MapPagesItemType.Page;
			else if (target[0] == '/')
			{
				Type = MapPagesItemType.InternalPath;
				Name = "#InternalPath#";
				Target = target[1..];
			}
			else if (Common._Consts.G_REGEX_NAME().IsMatch(target))
			{
				Type = MapPagesItemType.Page; // предположение
				Name = target;
			}
			else
			{
				Type = MapPagesItemType.ExternalLink;
				Name = "#ExternalLink#";
				Target = target;
			}
			Title ??= target;
		}

	}

}
